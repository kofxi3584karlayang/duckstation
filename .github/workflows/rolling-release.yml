name: Create rolling release

on:
  pull_request:
    paths-ignore:
      - '**.md'
      - 'appveyor.yml'
      - 'scripts/*'
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - 'appveyor.yml'
      - 'scripts/*'
  workflow_dispatch:

jobs:
  windows-build:
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2.3.1
      with:
        fetch-depth: 0
        submodules: true

    - name: Tag as release build
      shell: cmd
      run: |
        echo #pragma once > src/scmversion/tag.h
        echo #define SCM_RELEASE_TAG "latest" >> src/scmversion/tag.h
        echo #define SCM_RELEASE_ASSET "duckstation-windows-x64-release.zip" >> src/scmversion/tag.h

    - name: Compile release build
      shell: cmd
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
        msbuild duckstation.sln -t:Build -p:Platform=x64;Configuration=ReleaseLTCG

    - name: Remove extra bloat before archiving
      shell: cmd
      run: |
        del /Q bin\x64\*.pdb
        del /Q bin\x64\*.exp
        del /Q bin\x64\*.lib
        del /Q bin\x64\*.iobj
        del /Q bin\x64\*.ipdb
        del /Q bin\x64\common-tests*
        del /Q bin\x64\duckstation-libretro-*
        rename bin\x64\updater-x64-ReleaseLTCG.exe updater.exe
                
    - name: Create release archive
      shell: cmd
      run: |
        "C:\Program Files\7-Zip\7z.exe" a -r duckstation-windows-x64-release.zip ./bin/x64/*

    - name: Upload release artifact
      uses: actions/upload-artifact@v1
      with:
        name: "windows-x64"
        path: "duckstation-windows-x64-release.zip"


  windows-libretro-build:
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2.3.1
      with:
        fetch-depth: 0

    - name: Compile release build
      shell: cmd
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
        mkdir build
        cd build
        cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_LIBRETRO_CORE=ON -DCMAKE_C_COMPILER:FILEPATH="%VCToolsInstallDir%\bin\HostX64\x64\cl.exe" -DCMAKE_CXX_COMPILER:FILEPATH="%VCToolsInstallDir%\bin\HostX64\x64\cl.exe" ..
        ninja
        
    - name: Create libretro core archive
      shell: cmd
      run: |
        cd build
        "C:\Program Files\7-Zip\7z.exe" a -r duckstation_libretro.dll.zip ./duckstation_libretro.dll

    - name: Upload release artifact
      uses: actions/upload-artifact@v1
      with:
        name: "windows-libretro-x64"
        path: "build/duckstation_libretro.dll.zip"


  linux-build:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2.3.1
      with:
        fetch-depth: 0

    - name: Install packages
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get -y install cmake ninja-build ccache libsdl2-dev libgtk2.0-dev qtbase5-dev qtbase5-dev-tools qtbase5-private-dev qt5-default qttools5-dev

    - name: Compile build
      shell: bash
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SDL_FRONTEND=ON -DBUILD_QT_FRONTEND=ON -DUSE_SDL2=ON -G Ninja ..
        ninja
        ../appimage/generate-appimages.sh $(pwd)

    - name: Upload SDL AppImage
      uses: actions/upload-artifact@v1
      with:
        name: "linux-x64-appimage-sdl"
        path: "build/duckstation-sdl-x64.AppImage"

    - name: Upload SDL AppImage zsync
      uses: actions/upload-artifact@v1
      with:
        name: "linux-x64-appimage-sdl-zsync"
        path: "build/duckstation-sdl-x64.AppImage.zsync"

    - name: Upload Qt AppImage
      uses: actions/upload-artifact@v1
      with:
        name: "linux-x64-appimage-qt"
        path: "build/duckstation-qt-x64.AppImage"

    - name: Upload Qt AppImage zsync
      uses: actions/upload-artifact@v1
      with:
        name: "linux-x64-appimage-qt-zsync"
        path: "build/duckstation-qt-x64.AppImage.zsync"


  linux-libretro-build:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2.3.1
      with:
        fetch-depth: 0

    - name: Install packages
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get -y install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

    - name: Compile and zip Linux x64 libretro core
      shell: bash
      run: |
        mkdir build-libretro-linux-x64
        cd build-libretro-linux-x64
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_LIBRETRO_CORE=ON ..
        cmake --build . --parallel 2
        zip -j duckstation_libretro_x64.so.zip duckstation_libretro.so

    - name: Upload Linux x64 libretro core
      uses: actions/upload-artifact@v1
      with:
        name: "linux-libretro"
        path: "build-libretro-linux-x64/duckstation_libretro_x64.so.zip"

    - name: Compile and zip Linux AArch64 libretro core
      shell: bash
      run: |
        mkdir build-libretro-linux-aarch64
        cd build-libretro-linux-aarch64
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_LIBRETRO_CORE=ON -DCMAKE_TOOLCHAIN_FILE=../CMakeModules/aarch64-cross-toolchain.cmake ..
        cmake --build . --parallel 2
        zip -j duckstation_libretro_linux_aarch64.so.zip duckstation_libretro.so
      
    - name: Upload Linux AArch64 libretro core
      uses: actions/upload-artifact@v1
      with:
        name: "linux-libretro"
        path: "build-libretro-linux-aarch64/duckstation_libretro_linux_aarch64.so.zip"

    - name: Compile and zip Android AArch64 libretro core
      shell: bash
      run: |
        mkdir build-libretro-android-aarch64
        cd build-libretro-android-aarch64
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_LIBRETRO_CORE=ON -DANDROID_ABI=arm64-v8a -DCMAKE_TOOLCHAIN_FILE=${ANDROID_SDK_ROOT}/ndk-bundle/build/cmake/android.toolchain.cmake ..
        cmake --build . --parallel 2
        zip -j duckstation_libretro_android_aarch64.so.zip duckstation_libretro_android.so
      
    - name: Upload Android AArch64 libretro core
      uses: actions/upload-artifact@v1
      with:
        name: "linux-libretro"
        path: "build-libretro-android-aarch64/duckstation_libretro_android_aarch64.so.zip"


  android-build:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2.3.1
      with:
        fetch-depth: 0

    - name: Compile with Gradle
      shell: bash
      run: |
        cd android
        ./gradlew assembleRelease

    - name: Sign APK
      if: github.ref == 'refs/heads/master'
      uses: r0adkll/sign-android-release@v1
      with:
        releaseDirectory: android/app/build/outputs/apk/release
        signingKeyBase64: ${{ secrets.APK_SIGNING_KEY }}
        alias: ${{ secrets.APK_KEY_ALIAS }}
        keyStorePassword: ${{ secrets.APK_KEY_STORE_PASSWORD }}
        keyPassword: ${{ secrets.APK_KEY_PASSWORD }}

    - name: Rename APK
      if: github.ref == 'refs/heads/master'
      shell: bash
      run: |
        cd android
        mv app/build/outputs/apk/release/app-release-unsigned-signed.apk ../duckstation-android-aarch64.apk
         
    - name: Upload APK
      if: github.ref == 'refs/heads/master'
      uses: actions/upload-artifact@v1
      with:
        name: "android"
        path: "duckstation-android-aarch64.apk"

  macos-build:
    runs-on: macos-10.15
    steps:
    - uses: actions/checkout@v2.3.1
      with:
        fetch-depth: 0

    - name: Install packages
      shell: bash
      run: |
        brew install qt5 sdl2

    - name: Clone mac externals
      shell: bash
      run: |
        git clone https://github.com/stenzek/duckstation-ext-mac.git dep/mac

    - name: Compile and zip .app
      shell: bash
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SDL_FRONTEND=OFF -DBUILD_QT_FRONTEND=ON -DUSE_SDL2=ON -DQt5_DIR=/usr/local/opt/qt/lib/cmake/Qt5 ..
        cmake --build . --parallel 2
        cd bin
        zip -r duckstation-mac-release.zip DuckStation.app/

    - name: Upload macOS .app
      uses: actions/upload-artifact@v1
      with:
        name: "macos-x64"
        path: "build/bin/duckstation-mac-release.zip"

    - name: Compile libretro core and zip
      shell: bash
      run: |
        mkdir build-libretro
        cd build-libretro
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_BUILD_TYPE=Release -DBUILD_LIBRETRO_CORE=ON  ..
        cmake --build . --parallel 2
        zip -j duckstation_libretro_mac.dylib.zip duckstation_libretro.dylib

    - name: Upload macOS libretro core
      uses: actions/upload-artifact@v1
      with:
        name: "macos-x64"
        path: "build-libretro/duckstation_libretro_mac.dylib.zip"


  create-release:
    needs: [windows-build, windows-libretro-build, linux-build, linux-libretro-build, android-build, macos-build]
    runs-on: "ubuntu-latest"
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Download Windows x64 Artifact
        uses: actions/download-artifact@v1
        with:
          name: "windows-x64"

      - name: Download Windows libretro x64 Artifact
        uses: actions/download-artifact@v1
        with:
          name: "windows-libretro-x64"

      - name: Download SDL AppImage Artifact
        uses: actions/download-artifact@v1
        with:
          name: "linux-x64-appimage-sdl"

      - name: Download SDL AppImage zsync Artifact
        uses: actions/download-artifact@v1
        with:
          name: "linux-x64-appimage-sdl-zsync"

      - name: Download Qt AppImage Artifact
        uses: actions/download-artifact@v1
        with:
          name: "linux-x64-appimage-qt"

      - name: Download Qt AppImage zsync Artifact
        uses: actions/download-artifact@v1
        with:
          name: "linux-x64-appimage-qt-zsync"

      - name: Download Linux libretro core
        uses: actions/download-artifact@v1
        with:
          name: "linux-libretro"

      - name: Download Android APK
        uses: actions/download-artifact@v1
        with:
          name: "android"

      - name: Download Mac App
        uses: actions/download-artifact@v1
        with:
          name: "macos-x64"

      - name: Create release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          title: "Latest Development Build"
          files: |
            windows-x64/duckstation-windows-x64-release.zip
            windows-libretro-x64/duckstation_libretro.dll.zip
            linux-x64-appimage-sdl/duckstation-sdl-x64.AppImage
            linux-x64-appimage-sdl-zsync/duckstation-sdl-x64.AppImage.zsync
            linux-x64-appimage-qt/duckstation-qt-x64.AppImage
            linux-x64-appimage-qt-zsync/duckstation-qt-x64.AppImage.zsync
            linux-libretro/duckstation_libretro_x64.so.zip
            linux-libretro/duckstation_libretro_linux_aarch64.so.zip
            linux-libretro/duckstation_libretro_android_aarch64.so.zip
            android/duckstation-android-aarch64.apk
            macos-x64/duckstation-mac-release.zip
            macos-x64/duckstation_libretro_mac.dylib.zip

